---------------------------level 0 -->

to connect with the remote level0 server
ssh bandit0@bandit.labs.overthewire.org -p 2220

pass: bandit0

ls
ls -la

(there are many files, and run the following command line to get to know
which file contains ASCII character that means human readable
{} means the outputs of what the find command found )

find . -type f -exec file {} + | grep ASCII

cat readme

//this is pass for level1

exit

=============================level1
ssh bandit1@bandit.labs.overthewire.org -p 2220

ls

// just go to the prev directory
cd ..
cat bandit1/-

=============================level2
ssh bandit2@bandit.labs.overthewire.org -p 2220

ls -la

file contains spaces, so put a '' before every space.

cat spaces\ in\ this\ filename

=============================leve3
ssh bandit3@bandit.labs.overthewire.org -p 2220

ls -la
cd inhere
ls -la
cat .hidden

=============================leve4
ssh bandit4@bandit.labs.overthewire.org -p 2220

ls
cd inhere
ls -la

(there are many files, and run the following command line to get to know
which file contains ASCII character that means human readable)

find . -type f -exec file {} + | grep ASCII

-file07

but it starts with a '-' which is a start of a flag sign in command line
tricky one

so, two dashes in a row mean the end of flag sign.
don't forget to put a '' before the dash of the filename

cat -- -file07

===============================level5
ssh bandit5@bandit.labs.overthewire.org -p 2220

cd inhere
ls

here, 1033c == 1033 bytes

find .
-type f
-size 1033c
-not -executable
-exec file {} +
| grep ASCII

./maybehere07/.file2: ASCII text, with very long lines (1000)

cat maybehere07/.file2
---------------------------level6
ssh bandit6@bandit.labs.overthewire.org -p 2220

the file is anywhere in the server.

cd /
ls
find . -type f -user bandit7 -group bandit6 -size 33c -exec file {} + | grep ASCII

this will give alot of unnecessary messages which are not output at all:
try following command where 2>/dev/null dumps all the messages.

find . -type f -user bandit7 -group bandit6 -size 33c 2>/dev/null -exec file {} + | grep ASCII

./var/lib/dpkg/info/bandit7.password: ASCII text

cat ./var/lib/dpkg/info/bandit7.password

---------------------------level7
ssh bandit7@bandit.labs.overthewire.org -p 2220

grep -wi 'millionth' data.txt

---------------------------level8
ssh bandit8@bandit.labs.overthewire.org -p 2220

man uniq

uniq needs sorted data

cat data.txt | sort | uniq -u

---------------------------level9
ssh bandit9@bandit.labs.overthewire.org -p 2220

strings data.txt | grep -wi '=='

---------------------------level10
ssh bandit10@bandit.labs.overthewire.org -p 2220

cat data.txt | base64 --decode

---------------------------level11
ssh bandit11@bandit.labs.overthewire.org -p 2220

cat data.txt

go to rot13.com to decode the text in data.txt the pass

JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv

---------------------------level12
ssh bandit12@bandit.labs.overthewire.org -p 2220

move the data.txt to tmp/myname123/whatever

xxd -r data.txt > data

check the file data type,
file data

if it is zipped(bz2)
mv data data.bz2
bzip2 -d data.bz2

//for gz()
mv data data.gz
gzip -d data.gz

//for tar()
mv data data.tar
tar -xvf data.tar

mv data data.bz2
bzip2 -d data.bz2

again check the file type until it is ASCII:

wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw
---------------------------level13
ssh bandit13@bandit.labs.overthewire.org -p 2220

Here you will get a private key.
Store it in key.txt in your loacal machine

nano key.txt
chmod 600 key.txt

ssh -i key.txt bandit14@bandit.labs.overthewire.org -p 2220

baam!!!

you are on bandit14!!

----------------------------level14

the info is mentioned in level13
Now you need the pass of level 14 which is in /etc/bandit_pass/bandit14

then you need to connect to localhost:30000 (localhost of bandit14), then just put the pass, hit enter.

Or,

cat /etc/bandit_pass/bandit14 | nc localhost 30000

bandit15-->jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt

-----------------------------level15
ssh bandit15@bandit.labs.overthewire.org -p 2220

here you need to do the previous task, but in an ssl manner:

openssl s_client -ign_eof -connect localhost:30001

JQttfApK4SeyHwDlI9SXGR50qclOAil1

-----------------------------level16
ssh bandit16@bandit.labs.overthewire.org -p 2220

netstat -lntu

-l: It will print only listening sockets
-n: It will display the port number
-t: It enables the listing of TCP ports.
-u: It enables the listing of UDP ports.

//nmap is far better
nmap -p 31000-32000 localhost

/etc/bandit_pass/bandit16 | openssl s_client -connect localhost:31790 -quiet

Or

/etc/bandit_pass/bandit16 | openssl s_client -ign_eof -connect localhost:31790

-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ
imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ
Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu
DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW
JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX
x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD
KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl
J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd
d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC
YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A
vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama
+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT
8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx
SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd
HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt
SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A
R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi
Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg
R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu
L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni
blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU
YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM
77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b
dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3
vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=
-----END RSA PRIVATE KEY-----

mkdir /tmp/bannn
cd /tmp/bannn

nano sshkey.private

chmod 400 sshkey.private

ssh -i sshkey.private bandit17@bandit.labs.overthewire.org -p 2220

VwOSWtCA7lRKkTfbr2IDh6awj9RNZM5e

-----------------------------level17
ssh bandit17@bandit.labs.overthewire.org -p 2220

diff passwords.new passwords.old

hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg

-----------------------------level18
with the previous way, we can't login because of basrc being modified this way

we need to run remote commands while SSHing

ssh bandit18@bandit.labs.overthewire.org -p 2220 cat readme
awhqfNnAbc1naukrpqDYcF95h7HoMTrC

Another way:: SSHing with --norc, which means run the command without calling ./bashrc initially

ssh bandit18@bandit.labs.overthewire.org -p 2220 /bin/bash --norc

ls

cat readme

awhqfNnAbc1naukrpqDYcF95h7HoMTrC

-----------------------------level19
ssh bandit19@bandit.labs.overthewire.org -p 2220

./bandit20-do

OUTPUT: Run a command as another user.
Example: ./bandit20-do id

./bandit20-do whoami
output: bandit20

./bandit20-do id
output: uid=11019(bandit19) gid=11019(bandit19) euid=11020(bandit20) groups=11019(bandit19)

ls -l ./bandit20-do
-rw[s]r-x--- 1 bandit20 bandit19 14872 Sep 1 06:30 bandit20-do

the 's' means this file can be executed by an escelated user.

how to run a setuid binary

./bandit20-do cat /etc/bandit_pass/bandit20
VxCazJaVykI6W36BkBU0mJTCM8rR95XT

-----------------------------level20
ssh bandit20@bandit.labs.overthewire.org -p 2220

first just run the setuid binary to get the usage:

we have to open a server (on localhost with any random port no)

nc -lvp 4040

-l == server is listening for tcp/udp
-v == will have a verbose output
-p == port no

go to another window of terminal and run the binary file to connect to the server

./suconnect 4040

Then put the current password on the listening port of 4040
then setuid binary will reply the correct output.

NvEJF7oVjkddltPSrdKEFOllh9V1IBcq

-----------------------------level21
ssh bandit21@bandit.labs.overthewire.org -p 2220

cd /etc/cron.d/

ls -la

cat cronjob_bandit22

@reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null

bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
cat /usr/bin/cronjob_bandit22.sh

#!/bin/bash
chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv

password for next level is dumped in tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv with permission

cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv

WdDozAdTM2z9DiFEQ2mGlwngMfj4EZff

-----------------------------level22
ssh bandit22@bandit.labs.overthewire.org -p 2220

cd /etc/cron.d/

ls -la

cat cronjob_bandit23

@reboot bandit23 /usr/bin/cronjob_bandit23.sh &> /dev/null

bandit23 /usr/bin/cronjob_bandit23.sh &> /dev/null
cat /usr/bin/cronjob_bandit23.sh
#!/bin/bash

myname=$(whoami)
mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)

echo "Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget"

cat /etc/bandit_pass/$myname > /tmp/$mytarget
now run the scripts to do the task and you will
get the bandit22 pass at /tmp/$mytarget. That is not what the question is asking.

so we can instead run the command of the script

echo I am user bandit23 | md5sum | cut -d ' ' -f 1

8ca319486bfbbc3663ea0fbe81326349

cat /tmp/8ca319486bfbbc3663ea0fbe81326349

QYw0Y2aiA672PsMmh9puTQuhoz8SyR2G

-----------------------------level23
ssh bandit23@bandit.labs.overthewire.org -p 2220

cd /etc/cron.d/
ls -l

cat cronjob_bandit24

@reboot bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null

bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null
cat /usr/bin/cronjob_bandit24.sh
#!/bin/bash

myname=$(whoami)

cd /var/spool/$myname/foo
echo "Executing and deleting all scripts in /var/spool/$myname/foo:"
for i in * .*;
do
if [ "$i" != "." -a "$i" != ".." ];
then
echo "Handling $i"
owner="$(stat --format "%U" ./$i)"
if [ "${owner}" = "bandit23" ]; then
timeout -s 9 60 ./$i
fi
rm -f ./$i
fi
done

create a script in /tmp dir --> create a pass.sh --> create a file to store the pass using a command line
copy that to the /var/spool/bandit24/foo
wait for around 1 minute

cd /tmp/yYyYea
touch pass.sh
#!/bin/bash
cat /etc/bandit_pass/bandit24 > /tmp/yYyYea/pass

touch pass

chmod 777 -R /tmp/yYyYea

cp pass.sh /var/spool/bandit24/foo

ls -l
total 4
-rwxrwxrwx 1 bandit23 bandit23 0 Nov 22 17:41 pass
-rwxrwxrwx 1 bandit23 bandit23 61 Nov 22 17:10 pass.sh

ls -l
total 8
-rwxrwxrwx 1 bandit23 bandit23 33 Nov 22 17:43 pass
-rwxrwxrwx 1 bandit23 bandit23 61 Nov 22 17:10 pass.sh

cat pass

VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar

-----------------------------level24
ssh bandit24@bandit.labs.overthewire.org -p 2220

nano script.sh
#!/bin/bash
for i in {0000..9999}
do
echo VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar $i >> pos.txt
done

chmod 777 script.sh

./script.sh

cat pos.txt | nc localhost 30002 > result.txt

sort result.txt | grep -v "Wrong"

p7TaowMYrmu23Ol8hiZh9UvD0O9hpx8d

-----------------------------level25
ssh bandit25@bandit.labs.overthewire.org -p 2220

You can find bandit26 user default shell location in /etc/passwd

cat /etc/passwd | grep bandit26

bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext

bandit26's shell is at /usr/bin/showtext which is not the usual case.

cat /usr/bin/showtext
#!/bin/sh

export TERM=linux

exec more ~/text.txt
exit 0

bandit25@bandit:~$ ssh -i sshkey.private bandit26@bandit.labs.overthewire.org -p 2220

This will give us an error: Could not create directory '/home/bandit25/.ssh' (Permission denied).

bandit25@bandit:~$ cp ssh.private /tmp/yYyYea
cd /tmp/yYyY
mkdir -p .ssh
bandit25@bandit:/tmp/yYyYea$ ssh -i sshkey.private bandit26@bandit.labs.overthewire.org -p 2220

Enjoy your stay!

| | | () | |__ \ / /
| |__ __ _ _ __ __| || |_ ) / /_
| '_ \ /  | '_ \ / _ | | _| / / ' \
| |) | (| | | | | (| | | |_ / /| () |
|./ _,|| ||_,||_|_____/
Connection to bandit.labs.overthewire.org closed.

It's because the text.txt is too small. We can use more command's advantage more is used to view the text files in the command prompt, displaying one screen at a time in case the file is LARGE.
In other words, more command will NOT exit if there are more contents to be display.

so resize the terminal to six lines screen and run the command again.

bandit25@bandit:/tmp/yYyYea$ ssh -i sshkey.private bandit26@bandit.labs.overthewire.org -p 2220

this time, more command will wait for the file to end.
now press 'v' command to initiate vim editor
then write ':e /etc/bandit_pass/bandit26' and hit enter

c7GvcKlw9mC7aUQaPx7nwFstuAIBw1o1

-----------------------------level26
ssh bandit26@bandit.labs.overthewire.org -p 2220

again, downscale the terminal and connect to bandit26 with pass and try to fix the shell to /bin/sh

at more command, type 'v' to get the vim editor

to check the current shell:
:set shell ?

shell=/usr/bin/showtext

change the shell:
:set shell=/bin/sh

To execute a command in subshell, enter :!command. Lets execute in the subshell the following command

:!ls -la

-rwsr-x--- 1 bandit27 bandit26 14872 Sep 1 06:30 bandit27-do
we shall see a privileged file named bandit27-do

:! ./bandit27-do cat /etc/bandit_pass/bandit27

YnQpBuifNMas1hcUFk70ZmqkhUU2EuaS

YnQpBuifNMas1hcUFk70ZmqkhUU2EuaS

-----------------------------level27
ssh bandit27@bandit.labs.overthewire.org -p 2220

you can't clone the git repo on bandit27'd home.

create a folder in /tmp

mkdir foo

cd /tmp/foo

bandit27@bandit:/tmp/foo$ git clone ssh://bandit27-git@localhost/home/bandit27-git/repo

Previous line will not work. You have to specify port no which is 2220 as bandits are active on this port

bandit27@bandit:/tmp/foo$ git clone ssh://bandit27-git@localhost:2220/home/bandit27-git/repo

cd repo
ls
cat README

AVanL161y9rsbcJIsFHuw35rjaOM19nR

-----------------------------level28
ssh bandit28@bandit.labs.overthewire.org -p 2220

create a random file in /tmp directory.

bandit28@bandit:~$ mktemp -d
/tmp/tmp.HAO1TDw8TO
cd /tmp/tmp.HAO1TDw8TO
bandit28@bandit:/tmp/tmp.HAO1TDw8TO$ git clone ssh://bandit28-git@localhost:2220/home/bandit28-git/repo
ls
cd repo

bandit28@bandit:/tmp/tmp.HAO1TDw8TO/repo$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean

bandit28@bandit: cat README.me

Bandit Notes
Some notes for level29 of bandit.

credentials
username: bandit29
password: xxxxxxxxxx
wow password is xxxxx which is useless now. But what was there intially is important. you can find it from the previous commits.

bandit28@bandit: git log

commit 43032edb2fb868dea2ceda9cb3882b2c336c09ec (HEAD -> master, origin/master, origin/HEAD)
Author: Morla Porla morla@overthewire.org
Date: Thu Sep 1 06:30:25 2022 +0000

fix info leak
commit bdf3099fb1fb05faa29e80ea79d9db1e29d6c9b9
Author: Morla Porla morla@overthewire.org
Date: Thu Sep 1 06:30:25 2022 +0000

add missing data
commit 43d032b360b700e881e490fbbd2eee9eccd7919e
Author: Ben Dover noone@overthewire.org
Date: Thu Sep 1 06:30:24 2022 +0000

initial commit of README.md
now that 'fix info leak' commit seems interesting, see what was fixed in that commit

bandit28@bandit:/tmp/tmp.HAO1TDw8TO/repo$ git show 43032edb2fb868dea2ceda9cb3882b2c336c09ec

commit 43032edb2fb868dea2ceda9cb3882b2c336c09ec (HEAD -> master, origin/master, origin/HEAD)
Author: Morla Porla morla@overthewire.org
Date: Thu Sep 1 06:30:25 2022 +0000

fix info leak
diff --git a/README.md b/README.md
index b302105..5c6457b 100644
--- a/README.md
+++ b/README.md
@@ -4,5 +4,5 @@ Some notes for level29 of bandit.

credentials
username: bandit29
-- password: tQKvmcwNYcFS6vmPHIUSI3ShmsrQZK8S
+- password: xxxxxxxxxx
tQKvmcwNYcFS6vmPHIUSI3ShmsrQZK8S

-----------------------------level29
ssh bandit29@bandit.labs.overthewire.org -p 2220

download the git repo first, just like previous level. DON'T FORGET TO PUT THE PORT NUMBER

bandit29@bandit:/tmp/tmp.gLklDEvFBc$ git clone ssh://bandit29-git@localhost:2220/home/bandit29-git/repo

cd repo

git log and git status all are ok.. there's no leak.
BUT, there might other branches that leaks the info

bandit29@bandit:/tmp/tmp.gLklDEvFBc/repo$ git branch -a

you might see there is another branch 'dev'

bandit29@bandit:/tmp/tmp.gLklDEvFBc/repo$ git checkout dev

bandit29@bandit:/tmp/tmp.gLklDEvFBc/repo$ ls
code README.md

But both have nothing. We might guess that the leak is in the initial commits

bandit29@bandit:/tmp/tmp.gLklDEvFBc/repo$ git log
bandit29@bandit:/tmp/tmp.gLklDEvFBc/repo$ git show 2b1395f00cfb986163082c50100be5be8f249f64

xbhV3HpNGlTIdnjUrdAlPzc2L6y9EOnS

-----------------------------level30
ssh bandit30@bandit.labs.overthewire.org -p 2220

bandit30@bandit:/tmp/tmp.DywL2LwOM5$ git clone ssh://bandit30-git@localhost:2220/home/bandit30-git/repo

git status, git diff, git diff --stage, git branch -a all of them are useless here.

Git tagging is a way to mark specific points in the history of the repository. One example would be to mark release points of the software. The command to see the tags is git tag.

To create a tag the command is git tag -a <tag_name> -m <"tag description/message">. To see more details, like the tag message and commit, you can use the following command: git show <tag_name>.

bandit30@bandit:/tmp/tmp.DywL2LwOM5/repo$ git tag
secret
bandit30@bandit:/tmp/tmp.DywL2LwOM5/repo$ git show secret

OoffzGDlzhAlerFJ2cAiz1D41JW1Mhmt

-----------------------------level31
ssh bandit31@bandit.labs.overthewire.org -p 2220

bandit31@bandit:$ mktemp -d
/tmp/tmp.3K2OxQOi3d
bandit31@bandit:$ cd /tmp/tmp.3K2OxQOi3d
bandit31@bandit:/tmp/tmp.3K2OxQOi3d$ git clone ssh://bandit31-git@localhost:2220/home/bandit31-git/repo

Just follow the instructions of the README file

create a key.txt file, write the content, push to the origin from master branch.

VOILA, after staging and commiting, you will see there's no change in the working tree.

Then watch out the .gitignore guy, he is a cultprit. remove the content of the .gitignore file.
then add, commit, push.

rmCBvG56y58BXzv98yZGdO7ATVL5dW8y

-----------------------------level32
ssh bandit32@bandit.labs.overthewire.org -p 2220

So everything we type seems to be made uppercase which is not the usual case in terminal shell.

The only things in Linux that are uppercase is variables. Specifically, the variable $0 has a reference to a shell. You can see this with echo $0 on your machine.

$whoami
bandit33

wow, that means this sh is owned by bandit33
so print the pass form etc/bandit_pass/bandit33

$cat /etc/bandit_pass/bandit33
odHo63fHiFqcWWJG9rLiLDtPm45KzUKy

voila! this is the last level and to check whether you are correct or not, try to log in to bandit33
-----------------------------level33
ssh bandit33@bandit.labs.overthewire.org -p 2220
